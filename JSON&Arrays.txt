HTTP 1.1
********
It uses works on textual format.
There is head of line blocking that blocks all the requests behind it untill it doesn't get its all resources.
It uses request resource inlining for use getting multiple pages.
It compress data byitself.

HTTP 2
******
It works on binary protocol.
It allows multiplexing protocol so one tcp connection required multiple pages.
It uses PUSH frame by server that collects all multiple pages.
It uses HPACK for data compression.

--------------------------------------------------------------------------------------------------

Objects And Its Internal Representation In JavaScript
*****************************************************
Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript.
These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol)
in the sense that while these primitive data-types all store a single value each (depending on their types).

Objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs.
These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.
For Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.

objectName.propertyName
Like all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. You can define a property by assigning it a value. For example, let’s create an object named myCar and give it properties named make, model, and year as follows:

var myCar = new Object();
myCar.make = 'Ford';
myCar.model = 'Mustang';
myCar.year = 1969;
Unassigned properties of an object are undefined (and not null).

myCar.color; // undefined
Properties of JavaScript objects can also be accessed or set using a bracket notation (for more details see property accessors). Objects are sometimes called associative arrays, since each property is associated with a string value that can be used to access it. So, for example, you could access the properties of the myCar object as follows:

myCar['make'] = 'Ford';
myCar['model'] = 'Mustang';
myCar['year'] = 1969;
An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string. However, any property name that is not a valid JavaScript identifier (for example, a property name that has a space or a hyphen, or that starts with a number) can only be accessed using the square bracket notation. This notation is also very useful when property names are to be dynamically determined (when the property name is not determined until runtime). Examples are as follows:

// four variables are created and assigned in a single go, 
// separated by commas
var myObj = new Object(),
    str = 'myString',
    rand = Math.random(),
    obj = new Object();
myObj.type              = 'Dot syntax';
myObj['date created']   = 'String with space';
myObj[str]              = 'String value';
myObj[rand]             = 'Random Number';
myObj[obj]              = 'Object';
myObj['']               = 'Even an empty string';console.log(myObj);
You can also access properties by using a string value that is stored in a variable:

var propertyName = 'make';
myCar[propertyName] = 'Ford';propertyName = 'model';
myCar[propertyName] = 'Mustang';
You can use the bracket notation with for...in to iterate over all the enumerable properties of an object. To illustrate how this works, the following function displays the properties of the object when you pass the object and the object's name as arguments to the function:

function showProps(obj, objName) {
  var result = ``;
  for (var i in obj) {
    // obj.hasOwnProperty() is used to filter out properties from the object's prototype chain
    if (obj.hasOwnProperty(i)) {
      result += `${objName}.${i} = ${obj[i]}\n`;
    }
  }
  return result;
}
So, the function call showProps(myCar, "myCar") would return the following:

myCar.make = Ford
myCar.model = Mustang
myCar.year = 1969
Creating Objects In JavaScript :
Create JavaScript Object with Object Literal
One of easiest way to create a javascript object is object literal, simply define the property and values inside curly braces as shown below

let bike =
 {name: 'SuperSport', 
 maker:'Ducati', 
 engine:'937cc'};

--------------------------------------------------------------------------------------------------------

The ‘For’ Loop
**************
var numbers = [ 10, 20, 30, 40, 50] 
for (var i=0; i < numbers.length; i++) {
   console.log(numbers[i])
}
‍

The ‘For In’ Loop
*****************
var person = {
   fname: "Nick",
   lname: "Jonas",
   age: 26
}; 
for (let x in person) {
   console.log(x + ": "+ person[x])
}


The 'For of' Loop
*****************
const array1 = ['a', 'b', 'c'];

for (const element of array1) {
  console.log(element);
}

expected output: "a"
expected output: "b"
expected output: "c"

Iterating over an Array
-----------------------
const iterable = [10, 20, 30];

for (const value of iterable) {
  console.log(value);

expected output: 10
expected output: 20
expected output: 30

------------------------------------------------------------------------------------------------------------------
Difference between windows screen and documents
***********************************************

Window is the main JavaScript object root, aka the global object in a browser, 
and it can also be treated as the root of the document object model. You can access it as window.

window.screen or just screen is a small information object about physical screen dimensions.

window.document or just document is the main object of the potentially visible (or better yet: rendered) document object model/DOM.


-----------------------------------------------------------------------------------------------------------------

let myResume={
    "basics": {
      "name": "Ponraj",
      "email": "rajarat6@gamil.com",
      "phone": 9578741769,
      "degree": "B.E",
      "location": {
        "address": "15/16 Sainath Enclave ShenoyNagar",
        "postalCode": 600030,
        "city": "Chennai",
        "state": "Tamilnadu",
        "country": "India"
      },
      "profiles": [
        {
          "website": "https://www.linkedin.com/in/rajarajan-t-685958219/",
          "github":"https://github.com/RAJARAJAN-RT"
        }
      ]
    },
    "work": [
      {
        "company": "The Photophilehub PVT",
        "position": "Business Executive",
        "startDate": "2020-11-04",
        "endDate": "2021-08-15",
        "summary": "i am the business executive handling various task and gaining lots of experience",
      },
    ],
    "educsation": [
      {
        "institution": "Thiagarajar College Of Engineering",
        "department": "Mechatronics",
        "studyType": "fulltime",
        "batch start year": 2015,
        "batch end year": 2019,
        "gpa": 7.5,
      }
    ],
    "skills": [
      {
        "name": "python,javascript",
        "level": "beginer",
        "project": [
          "automatic attendance maintaing system using python language"
        ]
      }
    ],
    "languages": [
      {
        "language": "Tamil,Enlish",
      }
    ],
    "interests": [
      {
        "name": "script writter,youtuber,",
      }
    ]
  }
  console.log(myResume);

  ----------------------------------------------------------------------------------------------------------------
